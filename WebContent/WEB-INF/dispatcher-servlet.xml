<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd     
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/websocket
		http://www.springframework.org/schema/websocket/spring-websocket.xsd">
		
	<context:property-placeholder 
		location="classpath:/resource/properties/info"/>	
		
	<!-- 
	스프링에서 사용하게 될 초기 로딩 객체를 선언한다.
	
	<bean class="springweb.a01_start.A01_StartController"></bean>
	<bean class="springweb.a01_start.A02_EmpController"></bean>
	<bean class="springweb.a01_start.A03_DeptController"></bean>
	<bean class="springweb.z01_exp.A01_ExpController"></bean>
	<bean class="springweb.z01_exp.A02_MemberController"></bean>
	-->
	<!--
	특정한 패키지의 Controller단에 대한 객체 메모리 로딩
	include-filter type="annotation"
		expression="org.springframework.stereotype.Controller"
	-->
	<context:component-scan base-package="springweb">
		<context:include-filter type="annotation" 
			expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" 
			expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" 
			expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>
	<bean class="jspexp.a03_database.A01_Dao"/>
	<!-- 
	driver dburl user pas
	1. 연결 후, 자원해제 메서드 정의 : destroy-method="close"
	
	# database 접속 처리
	1. 연결 후, 자원해제 메서드 정의 : destroy-method="close"
	 -->
   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
      destroy-method="close">
      <property name="driverClassName" value="${driver}" />
      <property name="url" value="${dburl}"></property>
      <property name="username" value="${user}"></property>
      <property name="password" value="${pass}"></property>
   </bean>

	<!-- 
	2. mybatis 공통 xml 파일 설정.
	 -->
	   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<!-- BasicDataSource 연결객체의 정보를 mybatis에 할당 처리 -->
	 	<property name="dataSource" ref="dataSource"/>
	 	<!-- 공통 mybatis xml파일 설정 -->
	 	<property name="configLocation" 
	 		value="classpath:resource/mybatis.Spring.xml"/>
	 </bean>
	<!-- 
	3. 사용할 DAO 인터페이스 폴드 위치 지정..
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="basePackage" value="springweb.a02_mvc.a03_dao"></property>
	 </bean>
	  
	<!-- viewresolver의 추가
	1. default는 jsp/html만 처리하는 view는 자동으로 설정.
	2. 추가하는 view가 있으면 둘 다 선언하고, 우선순위를 지정해야 한다.-->
	<!-- 1. 공통 bean으로 등록한 뷰 등록 : order 우선순위 첫번째 -->
	<bean id="btnViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0" />
	</bean>
	<!-- 2. jsp 처리를 위한 뷰 등록 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 접두어/접미어 
		"WEB-INF\\views\\a02_mvc\\a03_empDeptList.jsp";
		접두어를 WEB-INF\\views
		접미어를 .jsp 설정하면
		controller의 메서드의 리턴값으로 
			return "a02_mvc\\a03_empDeptList";
			
		<property name="prefix" value="WEB-INF\\views"/>
		<property name="suffix" value=".jsp"/>
		-->
		<property name="order" value="1"/>
	</bean>
	<!-- 
	# viewresolver의 우선순위를 설정하는 것은 일단 먼저 bean이름으로
	등록된 것을 먼저 search하고, 그 다음 그 내용이 없으면 jsp호출하여 처리한다는 말이다.	
	-->
	<!-- 1. json viewer		ArrayList/객체형의 모델데이터를 json형식의 문자열로 변환 처리-->
	<bean id="pageJsonReport" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<property name="contentType" value="text/html;charset=utf-8"/>
	</bean>
	<!-- 2. 파일업로드뷰 viewer -->
	<bean id="multipartResolver"
    class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	<!-- 3. 파일다운로드뷰 viewer -->
	<bean id="downloadviewer" 
	class="springweb.z04_util.FileDownloadViewer"/>
	<!-- 4. 엑셀뷰 viewer -->
	<!-- 4. pdf뷰 viewer -->
	
	<!-- SMTP 서버 설정 
	springweb\WebContent\WEB-INF\lib\javax.activation-1.2.0.jar
	추가.
	-->
   <bean id="mailSender"
      class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com"/>
      <property name="port" value="587"/>
      <property name="username" value="rladudgk1922@gmail.com"/>
      <property name="password" value="skaksdkfRj1922!"/> 
      <property name="javaMailProperties">
         <props>
            <prop key="mail.smtp.auth">true</prop>
            <prop key="mail.smtp.starttls.enable">true</prop>
         </props>
      </property>
   </bean>   
   
   <!-- 
   # 다국어 처리 모듈 등록
   1. 핵심 클래스 등록 (선택 UI를 통해서 다국어를 처리할 때 활용)
   2. 다국어 파일 기본 위치 등록
    -->
    <bean id="localeResolver" class=
    "org.springframework.web.servlet.i18n.SessionLocaleResolver"/>
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    	<property name="basenames">
    		<list>
    			<value>resource.properties.msg</value>
    		</list>
    	</property>
    </bean>
    <!-- 1. 요청 핸들러 맵핑 클래스와 어댑터 선언 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>    
    <!-- 2. 서블릿 핸들러를 선언하여 사용할 수 있게 선언. -->
    <mvc:default-servlet-handler/>
    <!-- 3. 소켙통신 핸들러 클래스 연동 처리..
    		http://localhost:7080/springweb/chat-ws.do로 호출하면
    		해당 핸들러가 호출되어 사용될 수 있게 처리. -->
    <websocket:handlers>
    	<websocket:mapping handler="chatHandler" path="/chat-ws.do"/>
    </websocket:handlers>
   
   <!-- 
   # AOP 처리
   1. advice
    -->
    <bean id ="profilier" class="springweb.z04_util.Profilier"/>
<!-- 
2. aop처리
 -->
 <aop:config>
 	<aop:aspect id="traceAspect" ref="profilier">
 		<aop:pointcut 
 		expression="execution(public * springweb.a02_mvc.a03_dao..*(..))" id="publicMethod"/>
 		<aop:around method="trace" pointcut-ref="publicMethod"/>
 	</aop:aspect>
 </aop:config>
   
   
   

</beans>