# spring을 통한 ajax 처리.
1. 스프링 환경하에 ajax처리 방식
	스프링에서 웹 환경에서 비동기적으로  ajax를 처리할 수 있는데
	기존 jsp보다 효과적인 json 데이터를 처리하고 요청 프로세스를
	받을 수 있다.
	1) 프로세스
	브라우저 화면 ==> 초기 화면 로딩 ==>
	이벤트를 통한 요청 데이터 호출 ==> 스프링
	기반 서버(로컬, 원격서버) ==> 요청데이터를 json형식으로 전달 
	==> jquery에서
	받은 json데이터 DOM 생성 코드를 통해서 화면에 출력 처리..
	2) 개발 순서
	컨테이너에 json데이터 처리 view bean 선언 (pageJsonReport)
	spring 기본 초기화면 controller, view단 생성
	비동기에 의해 필요로 하는 데이터 처리 sql 작성
	dao작성
	XXXmapper.xml작성
	service
	controller에서 해당 기본 데이터 호출 화면에 로딩(json데이터 화면)
	spring 기본 초기화면에서 event 처리 jquery ajax 호출 코드를 통해서
		controller에 mapping되어 있는 데이터 처리 호출.
		$.ajax({속성:속성값...});
		success:function(data){}
		data를 통해 받은 json데이터를 DOM객체 생성 코드를 통해서 처리
		완료.
	
	

2. 스프링에서 ajax를 위해서 처리해야할 부분
	1) server단에서 사용하는 객체형식은 json형식을 문자열로 생성한다.
		ex) {"속성":"속성값","속성":숫자형속성}
		new Person("사과",3000,2) 
		==>{"name":"사과","price":3000,"cnt":2}
	2) bean으로 스프링프레임웍에서 객체를 json문자열로 변환시켜주는 
		viewresolver를 컨테이너에 선언하고, 해당 
		호출객체(url mapping 메서드)는 
		view단 호출을 이 bean으로 호출하면 model설정된 객체가
		json문자열로 변환하여 client에 전달한다.
	3) 처리 순서
		- 환경 설정
			container에 bean viewResolver를 등록
			json view를 등록.
		- controller에서 요청으로 호출하면,
			return "선언된 json처리 viewer"
	4) model 데이터의 json데이터 변환 기준
		m.setAttribute("emp", service.empList(sch));
		{"emp":"안녕"} : 하나의 데이터일때,
		{"emp",{"empno" : 7890,"job":"홍길동"...}} : 1개 row단위 데이터
		{"emp",[{"empno"..},{},{}]} : 다중 row단위 데이터
		

3. jquery통한 ajax통신 데이터 처리.
	1) 서버단에서 전달해온 데이터는 jquery에서 특정 이벤트에 의해,
		json문자열을 json객체로 변환해서 비동기적으로 활용한다.
	2) $.ajax({
			속성:속성값,
			속성:속성값,
			success:function(json){
				// 서버에서 받는 json객체를 활용할 수 있게 된다.
				
			},
		});
	3) 속성
		type : 요청의 전달 방식 get/post 방식
		url : 데이터를 가져올 controller단 mapping url ex) jsonEmp.do
		data : 서버에 요청할 query String 
			- 순수 query String : "key=value&key=value.."
			- json객체형 : {key:value, key:value}
			- form요소자동 query String 변경 + 한글 encoding 처리 : 
				$("form").serialize()
		dataType : 결과값을 받는 형식을 지정, JSON.parse(), eval()함수를
			이용해서 객체형으로 변환하지 않더라도 정상으로 처리가 된다.
				xml(jsp/html로 DOM화면을 받아서 바로 처리), 
				json(객체변환필요하지 않음 - 문자열 json을 객체로 변환)
				, text
		success : function(data){}
			정상적으로 받았을 때, 처리할 데이터를 매개변수(data)로 처리할 수 있다.
			받은 객체를 each 구문을 통해서 화면에 DOM객체로 할당 처리한다.
			controller에서 선언 : m.setAttribute("emp",..);
			data.모델명
			{"emp":"안녕"} : 하나의 데이터일때,
				data.emp ==> "안녕"
			{"emp",{"empno" : 7890,"job":"홍길동"...}} : 1개 row단위 데이터
				data.emp.empno ==> 7890
				var emp = data.emp
				emp.empno// emp.ename// emp.job..
			{"emp",[{"empno"..},{},{}]} : 다중 row단위 데이터
				var empList = data.emp;
				$(empList).each(function(idx, emp, array){
					
				});
			
			
		error:function(err){}
			에러가 발생했을 때, 처리할 함수정의
				
				
ex) 연습 예제
# 회원 id 등록 여부 확인
1. 처리 순서
	1) sql 확인
		SELECT count(*) 
		FROM member5
		WHERE id='himan';
	2) dao 작성	public int schMemem(String id);
	3) mapper 작성
	4) controller단 작성 A03_AjaxController.java
		- 기본 화면 호출
			회원 등록 여부
			[   ][확인] enter키나 버튼 둘다.
			view\a03_ajax\a03_regMember.jsp
		- 데이터 처리
	5) view단 처리
		$.ajax();
				
		
		
		