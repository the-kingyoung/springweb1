#스프링 화면 처리 프로세스

[서버]
	특정 위치에 WAS(web application server) 구동
	
[클라이언트]
1. http://localhost:7080/springweb/start.do url
	http://ip주소/도메인명:7080/springweb/start.do url
	?요청key=요청값(get방식 / post방식 name="요청key" value="요청값")
	

[서버]
2. [설정]web.xml
	.do 를 확인해서 front controller인
	DispatcherServlet.java(framework)
	
3. [설정]dispatcher-servlet.xml을 호출하여,
	해당하는 컨테이너에 등록된 객체를 확인하고
	메모리에 로딩된 객체를 찾는다.
	1) 전체적으로 특정정 패키지 기준으로 등록 : 사용자 정의 클래스 / 객체
		context:component-scan basePackage=""
	2) 추가적으로 필요한 framework - viewResolver
		controller/service/dao
		framework : mybatis(DB)
	이중에서 requestMapping("/start.do")가 있는 controller
	기능 메서드 찾기.
	
4. [controller:주소호출]위에 등록된 객체 안에서 url패턴이 /start.do
	인것의 기능 메서드를 찾는다.
	@RequestMapping("/start.do")
	해당 controller의 기능 메서드를 수행시켜준다.

5. [controller : 요청값처리]해당 기능 메서드에서 요청값과 model값 설정은 매개변수로 받을 수 있다.
	?name=홍길동&age=25&loc=서울신림동
	public String start(@RequestParam("name") String name, Model d)
						Person s
						@ModelAttribute("sch") Person s
		ModelAttribute : 요청값을 받을 뿐만 아니라 모델데이터로 사용하기 위해서 활용된다.
						+ spring의 form 태그
						<form:form ModelAttribute="sch"로 선언하여
							<form:input path="name"/>
							==> <input id="name" name="name" value="${sch.name}"

6. [controller : 모델데이터처리]해당 기능 메서드에 문자열로 리턴된 view단으로 화면이 호출된다.
	model : MVC 중 하나로 화면/view 
	public String start(Model d)
	d.addObject)("모델key",모델객체);
	모델객체 : Service --> Dao --> mybastis Framework --> DB Server
					 <--	 <--					<--
7. [controller : view단 호출] 해당 기능 메서드에 문자열로 리턴된 view단으로
	화면이 호출된다.	
	return "jsp파일 위치";	(forward방식을 기본으로 한다) 
							 request/response(모델/요청/session)
		return "forward	: /다른 url mapping ex) "forward:/emp.do"
		return "redirect: /다른 url" : request/response 전달하지 않음
		
	ModelAndView : model + view
		addObject(모델key, 모델값)
		setViewName("뷰단 호출")
		ex) public ModelAndView show(){
				ModelAndView mav = new ModelAndView();
				mav.addObject(key,value);
				mav.setViewName("뷰단호출");
				return mav;
			}
		return "pageJsonReport";
			// container에서 선언된 bean으로 된 view 처리 방식(json)
	
8. [view]
	${모델명} : 한개의 변수
		ex)
		controller : m.setAttribute("greet","hello");
		jsp ${greet}
	${모델명.프로퍼터}	: 객체로 선언되어 있을 때.
		ex)
		controller : m.setAttribute("emp", service.getEmp(empno));
		jsp:
				${emp.ename} == emp.getEname()
					cf) mybatis #{ename}
					
	${배열형모델명}" : list형 객체 배열
		ex)
		controller : m.setAttribute("empList", service.getEmpList(sch));
		jsp : <c:forEach var="emp" items="${empList}"
					
9. [설정] front controller인 DispatcherServlet 최종으로 클라이언트 전달.
		 response 객체를 통해서 html코드를 전달
	
[클라이언트]
10. 서버에서 만들어진 화면을 response객체로 전달되어 client에
	html로 전달하면 브라우저에서는 해당 js/html/css코드를 
	실행 및 랜더링하여 출력한다.
================================================================================
# 스프링 핵심 구현
1. front controller 선언
	DispatcherServlet
	
2. 사용할 container 선언
	DispatcherServlet의 설정값 처리 xml : 
	IOC (Inversion of Control) 개발자 ==> 컨테이너 통제를 맡김.
		- DI(Dependency Injection) - 의존성 주입
			ex) autowiring : 객체 vs 객체 메모리에 로딩된 상황에서
				의존성이 있는 객체는 해당 객체에 메모리에 할당(주입)
				Controller안 
				@Autowired
				private Service service;
				
		- DL(Dependency Lookup) - 의존된 내용을 id/name으로 설정된
			객체를 찾는 작업
	dispatcher-servlet.xml : 여기에 선언하는 객체 활용 방식을 정확하게 파악하고
	설정할 수 있어야 원활하게 스프링을 코딩하고 설정할 수 있다.
	bean클래스 선언을 통해서 tomcat이 시작되어
	첫번째 호출될 때 사용할 객체 메모리로 로딩.
		- Controller를 등록 처리..
	- 사용자 정의 객체에 대한 로딩
		공통 controller/service/dao단
	- framework에 지원되는 여러 클래스를 객체로 로딩 처리
		주로 활용되는 내용
		공통 controller/service/dao단 설정위치 처리
		소스에서 호출하여 처리 방법 선언 : Annotation 코드를 autowire 처리
		여러가지 viewResolver의 등록처리(json, 파일업로드/다운로드..
		database베이스 처리 framework 등록(mybatis)
		사용할 공통 key값 등록 호출.(연결할 서버 정보-DB서버, 파일서버, 메일서버)
		다국어 처리 모듈 등록.
		
	
3. spring MVC
	- Controller : java 클래스로 선언 / 중재자 역할(요청, service전달/받기, 모델 데이터 선언, view단 호출)
		controller --> service --> dao(인터페이스) ==> DB서버
	  <<요청값 전달>>	비지니스 로직 처리					select *
	  												from
	  												where empno = #{empno)
	  												parameterXXXX
						
		controller <-- service <-- dao(실객체) <== DB서버
		모델처리		비지니스 로직 처리				<<데이터베이스 처리 결과>>
												select * 의 결과를 전송
												resultXXXX
	- Model : controller 안에 선언
		화면단에 보내줄 핵심 데이터 처리
		# model데이터를 만들기 위해 도와주는 process 객체들!!
		-service
			핵심 비지니스 로직 처리
				등록/수정/삭제/데이터베이스 가져오기 등,
				사용될 핵심 로직을 처리한다.(조건/반복문활용)
				모델데이터를 만들기 위한 작업 처리.
		-dao(database access object)
		ps) controller, service, dao를 분리시켜 놓으면, 재활용을 할수 있고
			기능적인 구분을 할 수 있어 효과적인 프로그래밍 처리가 가능하다.
			
		
	- View : jsp 파일 controller에서 호출..
		스프링의 view는 외부에서 url로 접근하지 못하고,
		controller를 통해서만 접근이 가능하게 처리한다.
		WebContent\WEB-INF : 아무나 접근 불가!!~^^
		ps) css/js관련 기본 설정내용, 이미지는
		WebContent 하위에 있어야지 소스내에서 
		${path}/경로/파일명 접근이 가능하다.
		
4. DI
	컨테이너에 사용할 객체 선언방법, 여러가지 효과적인 기능 처리 선언방법
	
5. 데이터베이스 처리(DAO-mybatis프레임웍 활용)
	1) 컨테이너에 선언 방법(connection)
		- 연결객체
		- mybatis공통 xml 위치
		- dao 인터페이스 위치 : 해당 위치를 컨데이너에서 지정을 해야
							mybatis framework에서 실제 객체를 만들어 준다.
		
	2) mybatis공통 설정 xml
	3) 기능별 sql xml 설정 방법
	4) mybatis 프레임웍을 통해서 실체객체를 만들어 주는 
		dao interface 선언 패키지
	5) XXXmapper.xml vs DAO인터페이스 mapping 
		dao 인터페이스 --> namespace
		메서드명		--> id
		리턴값		--> resultMap/resultType
		매개변수		--> parameterMap/parameterType
	
6. MVC 중급
	1) 여러가지 viewer 활용
		- ajax를 json처리 ==> jquery plugin 활용
		- 파일업/다운로드
		- 엑셀 다운로드
	2) 유효성 처리 / 예외 처리
	3) session 처리
	4) 다국어 처리 : 하나의 페이지에서 설정값에 의해 여러나라의 언어를 지원 처리

7. AOP
	관점 지향적 프로그래밍 처리..
	
8. 실무 예제
	1) 답변형 게시판
		- 계층 구조 테이블 설계
		- 파일을 첨부하여 게시물 작성과 등록
		- 페이지 처리 로직
		- 답글에 따른 계층적 list
	2) 메일 발송
	3) ajax를 통한 fullcalendar(jquery lib활용) 처리
	4) vue와 연동하여 데이터 처리.
		
	
# 환경 설정 순서
1. lib 복사
2. http://localhost:7080/springweb/start.do
	- 호출되었을 때, 스프링 프레임웍에 의해서 controller가 
	호출되고, view단이 출력되게 처리한다.
	- 사용하게 될 controller를 컨테이너에 등록 dispatcher-servlet.xml
	- controller에 @Controller를 선언
	
	
3. 스프링 프레임웍의 첫단추인 front 컨트롤단 호출
	.do를 통해서 
	
4. /start.do url을 통해서 mapping되어 있는 
	controller의 기능 메서드 호출..
	
5. 해당 기능 메서드의 return "view 자원 위치"
	통해서 view 호출.

# controller의 세부 사항
1. 요청값
	- 한개의 요청값 받기
	- 객체로 요청값 받기
2. 모델데이터처리
3. 뷰단호출
	- 문자열로 실행할 view단을 호출 forward처리(request, response전달)
	- 선언된 controller의 mapping된 기능메서드 호출
		- redirect :/선언된url.do
		- forward :/선언된url.do
	- 여러가지 viewer호출	
4. 요청값 + 모델처리 : ModelAttribute
5. 모델처리 + 뷰단처리 : ModelAndView

# 요청값 처리..
&name=홍길동
1. request.getParameter("name")
	form(@RequestParam("name") String name)
	요청값을 name의 key String name에 할당하여 가져올 수 있다.	
2. 객체

# ModelAttribute
1. controller단의 공통 모델데이터에 대한 선언.
	- 하나의 업무단위로 controller를 쓰고,
	- 하나의 기능단위로 mapping을 처리한다.
	ex) 사원정보 처리 - 리스트, 상세화면, 등록/수정/삭제
		부서정보 콤보박스, 관리자정보 콤보박스, 
2. 요청값+모델데이터를 동시에 처리

# 스프링에서 사용되는  form 태그
1. 스프링에서는 <form:form 형식으로 태그의 form을 효과적으로
	처리할 수 있도록 tag lib을 사용할 수 있다.
2. form의 구성요소별 설정 내용
	1) lib 선언
	<%@ taglib prefix="form"
		uri="http://www.springframework.org/tags/form" %>
	2) <form:form commandName="모델명"
				  modelattribute="모델명"
	
		하위에 있는 요소들을 setXXX property와 연동하여 준다.
			<form:input path="property명">
		
		ex) 컨트롤러에 model로 d.addAttribute("emp",new Emp())
			<form:form commandName="emp"
				<form:input path="empno">
				==> <input type="text" id="empno" name="empno"
						value="${emp.empno}"/>
				
			select, checkbox, radio 옵션 중
			% <c:forEach> 구문을 사용하지 않더라도 효과적으로 폼요소객체를 구현할 수 있다.
			1) 레이블에 보이는 데이터와 전송되는 데이터가 동일할 경우
				<option>사과</option>
				 <form:options items="${모델어트리뷰트명}"/>
				 
			2) 레이블에 보이는 데이터와 전송되는 데이터가 다른 경우
				key/value	<option value="ch01">사과</option>
				<form:options items="${모델어트리뷰트명}" 
				itemLabel="value값" itemValue="key값"/>
				
			3) <form:select items=${모델어트리뷰터명}"/> 단일 리스트
			   <form:select items=${모델어트리뷰터명}"
			   			itemLabel="value값" itemVale="key값"/>
			   			key/value 형식의 리스트


# 스프링 MVC로 개발하기..
1. 요구사항
	1) 리스트 처리
	2) 상세화면
	3) js(간트/데시보드)
2. 화면설계
3. 출력할 데이터를 DB를 설계한다.
	1) 테이블 구성
		- ERD 작성
		화면에는 하나의 리스트나 입력내용이 나오지만,
		데이터의 무결성과 효율성으로 테이블이 나누어지는 경우가 있다.
		==> 조원들과 공유 및 협의를 통해서 처리.
4. 출력할 sql 작성
	1) 테이블 하나로 처리가 가능할 때. 
		select * from 테이블
	
	2) 여러개의 테이블을 조인해야할 필요가 있을 때.
		조인 조건을 기준으로 데이터를 처리..
		select e.*, d.dname, d.loc
		from emp e, dept d
		where e.deptno = d.deptno;
	3) 입력/수정/삭제
5. 위에 출력한 내용과 조건을 기준으로 VO/DTO를 작성.
	1) 테이블 기준으로 VO작성하는 것이 아니라, sql의 select나
		insert, update, delete의 사용될 데이터를 기준으로
		vo를 작성하여야 한다.
6. 초기화면 구현
	1) Controller
	@RequestMapping("/empDeptList.do")
		url맵핑을 통해서 화면이 나오게 처리.
	2) View - 초기 html css 구현.
7. controller의 처리
	public String empDeptList(@ModelAttribute("sch") EmpDept sch(요청값처리), Model d) { (모델데이터 선언.)
	d.addAttribute("empDeptList", service.schEDGList(sch));
	



	1) 요청값(받는 데이터) - client ==> server
			ex) 사원정보를 조회시 사원명[	] 직책[	]
			ex) 회원등록시, 회원정보 id[	] pas[	] 이름[	]
		모델데이터(화면에서 서버에서 받은 데이터 처리/화면에 전달할 데이터) 설정
		- server ==> client
			ex) 사원 정보 리스트
			ex) 상세 정보
			ex) ajax의 경우 json 데이터
	2) 요청값이 무엇인지 판단 : 조회의 조건, 등록, 수정, 삭제...
		- query string : 컨트롤러의 url?요청키=요청값&요청키=요청값
		- form 하위에 name="요청키" value="요청값"
		- location.href="컨트롤러?요청키=요청값";
	3) 요청값을 controller의 메서드에 매개변수로
		- @RequestParam("요청키") String 받는 요청값;
		- @RequestParam("요청키") int 받는 요청값;
		- VO 객체를 통해서 받을 수 있게 처리..
			set요청키 : property 개념..
			ex) public String insert(Emp ins){}
	4) 모델데이터 처리(dao, mapper.xml에서 처리 후 진행한다.)
		- 기능메서드의 매개변수 
			public String list(Emp sch, Model d){}
		- 화면에 전달할 핵심 데이터를 설정..
			d.addAttribute("key", 전달객체);
	5) 요청값 + 모델 : @ModelAttribute로 처리
	6) 모델+view : ModelAndView 객체로 처리..
8. 데이터 처리
	1) sql을 확인하고, 입력(조회 조건, insert, update, delete),
		출력(select 이후에 출력할 컬럼리스트) 판단하여 VO에 할당하여,
		VO 작성 확인 후,
	2) dao에 작성		public 리턴할객체  메서드명(입력할 객체);
		ex) public ArrayList<Emp> empList(Emp sch);
	3) 공통할당할 VO의 alias선언과 XXXMapper.xml
		resource\mybatis.Spring.xml
	4) XXXMapper.xml을 활용하여
		결과값 선언 : resultMap, 입력값 : parameterType
		<select
9. Autowired를 통한 service단 선언과 dao 호출,
	controller에서 service단 호출과 model데이터를 설정 처리.
		d.addAttribute("모델명", service.empList(sch));
	1) service에서 요청값을 변경하거나, 모델데이터를 수정처리할 때, 
		처리를 한다.
		
# Session 처리
1. 목적 : 로그인 후, DB 접속없이 
	1) 각 화면에서 권한 check, 
	2) 로그인 인증 이후에 처리할 내용 프로세스 처리.
	3) 작성자나 특정 데이터를 session값으로 자동 입력 처리
	
2. 주요 코드 내용
	1) 특정한 인증된 사용자에 대하여 해당 객체를 session값을 설정한다.
		- 초기 로그인 화면 처리.
	2) public String login(Member mem, HttpServletRequest request){
			Member ckDB = service.chMember(mem);
			if(ckDB!=null){
				HttpSession session = request.getSession();
				session.setAttribute("sesMem",ckDB);
			}	
	   }
		@RequestMapping("logout.do")
		public String logout(HttpServletRequest request){
			HttpSession session = request.getSession();
			session.invalidate();
			return "redirect:/login.do");
		}
		
	3) 각 화면에서 처리 내용
		js
		$("#logout").click(function(){
			location.href="${path}/logout.do";
		});
		var sessId = "${sesMem.id}";
		if(sessId==""){
			alert("로그인이 필요합니다!\n로그인화면으로 이동");
			location.href="${path}/login.do";
		}
		$("#uptBtn").click(function(){
			var writer=$("[name=writer]").val();
			if(sessId!=writer){
				alert("작성자만이 수정가능합니다!");
				return;
			}
		});
		
		등록시, 작성자는 session의 id로만 입력이 가능하게 처리.
		<input name="writer" readonly value="${sesMem.id}"/>

3. 게시판 적용
	1) sql 확인
		select * from member where id=#{id} and pass=#{pass}
		select *
		from member5
		where id='himan' and pass=7777
	2) dao/mapper작성
		public Member login(Member mem);
	3) service
	4) controller에서 로그인 화면 및 session 처리
	



