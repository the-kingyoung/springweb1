# ajax를 활용한 fullcalendar plugin 활용하기
1. spring에서 지원하는 json viewer를 이용하여,
	backend단의 데이터를 fullcalendar api와 연동하여,
	효과적인 calendar 데이터를 js lib를 통하여 처리한다.
2. 개발 순서
	1) fullcalendar lib 다운로드
	2) jsp 환경으로 front end단 lib호출 처리
	3) fullcalendar api의 json데이터와 주요 핵심 기능 메서드 확인
	4) 주요 기능 정의 : 리스트 처리, 초기 등록, 수정변경, 삭제
	5) fullcalendar 기본 sample 예제 및 api를 통해서,
		json데이터를 테이블 구조로 변경하여 테이블 생성, sample데이터 입력
	6) 사용하게될 sql 작성
		- 조회
		- 등록
		- 수정
		- 삭제
	7) 해당 내용을 처리하기 위한 vo/dto 정의
	8) sql 기반으로 하여 dao 작성
	9) mybatis.spring.xml에 사용할 vo/dto alias 및 CalMapper.xml 등록
	10) CalMapper.xml에서 작성한 dao와 연동 처리...
	11) service작성 및 dao 호출
	12) Controller 작성
		- 초기 화면 호출
		- ajax호출 기능메서드 구현
			조회
			등록
			수정
			삭제
	13) view단에서 해당 데이터 list/수정/삭제 ajax 호출 처리
	14) 각 기능별 기능 메서드 구현
	
# spring controller 통해서 초기 화면 처리.
1. 스프링 controller / fullcalendar호출 화면만들기
2. 필요한 lib 특정 위치에 복사 처리
	WebContent\fullcalendar-5.6.0\lib 폴더를 복사
	WebContent\a00_com에 위치시킨다.

3. jsp에 해당 내용 controller 호출하여 보일 수 있게 처리.
	WebContent\fullcalendar-5.6.0\examples\selectable.html
	에 있는 내용을
	WebContent\WEB-INF\views\a03_ajax\a04_fullcalendar.jsp
	에 복사 처리한다.
4. 초기 화면 호출.
	controller의 url mapping을 통해서 호출

# fullcalendar api의 json데이터와 주요 핵심 기능 메서드 확인
1. new FullCalendar.Calendar(calendarEl,{속성,속성값..});
	1) calendarEl : 화면에 지정한 DOM객체
	2) {속성,속성값..} : calendar에 활용할 속성들
2. 주요 속성.
	1) headerToolbar : 상단 타이틀 옵션 설정.
	2) initialDate : 초기로딩 기준일
	3) 주요 이벤트
	 	형식 - 이벤트명 : function(){} : 각 날짜에 대한 이벤트를 통해 처리할 내용..
	 	 select: function(arg) {}
	 	 	없는 일정에 클릭이나, 시간을 클릭 후, 스크롤링 했을 때,
	 	 	arg는 해당 날짜(시작/마지막/종일여부)
			속성을 가져온다.
			arg 객체의 속성들
			arg.start : 선택한 시작 날짜(new Date()객체)
			arg.end : 선택한 마지막 날짜(new Date()객체)
			arg.allDay : 종일 일정여부(날짜/시간) boolean
			calendar.addEvent(추가할 일정을 json형식);
			매개변수로 받은 일정을 화면에 반영하기 위한 일정 추가
			이벤트 처리.
			ex)
			calendar.addEvent({
	            title: title,
	            start: arg.start,
	            end: arg.end,
	            allDay: arg.allDay
			})
		# eventClick : 현재 보이는 일정을 클릭시 처리 내용.	
			eventClick: function(arg) {
				# 있는 일정을 클릭시, arg.event에 있는 속성
				allDay:true // 종일 여부 시간일때는 false
				backgroundColor:"" // 배경색상
				borderColor : "" // 테투리 색상
				end : null // 마지막일
				extendedProps : Object	//추가할 속성
				groupId:(...) // 그룹으로 지정할 때..
				id : "" // 식별자
				start : Thu Apr 01 2021 00:00:00 GMT+0900(대한민국)
				textColor:""//글자색
				title : "All Day Event" // 보일 제목
				url: "" // 링크할 url
				arg.event.remove() : 기존 일정 삭제시 처리한
				이벤트..화면에서 사라진다.
	4) 화면에 리스트 되는 일정 json 형식으로 출력.
		events: [
		{
    	  title:"일정추가^^",
    	  start:"2021-04-02",
	ex1) 등록시, 배경색상을 노란색, 글자 색상 파란색으로 처리
	ex2) events에 json일정등록 제목은 수료일
		글자색상은 노란색, 배경색상은 초록색으로 처리되게 하세요
# 속성을 이용한 테이블 구조 만들기.
id
groupId
title
writer
content
start
end
allDay
textColor
backgroundColor
borderColor

create table calendar(
	id number primary key,
	groupId number,
	title varchar2(50),
	writer varchar2(50),
	content varchar2(1000),
	start1 date,
	end1 date,
	allDay number(1),
	textColor varchar2(50),
	backgroundColor varchar2(50),
	borderColor varchar2(50)
);

	drop table calendar;
	create table calendar(
		id number primary key,
		groupId number,
		title varchar2(50),
		writer varchar2(50),
		content varchar2(1000),
		start1 varchar2(50),
		end1 varchar2(50),
		allDay number(1),
		textColor varchar2(50),
		backgroundColor varchar2(50),
		borderColor varchar2(50)
	);
	// start1 date : 조회/상세읽기(o)	등록/수정/삭제 => bug toISOString()
	//

create sequence cal_seq
	start with 1
	increment by 1
	minvalue 1
	maxvalue 9999999
	no cycle;
	
	
# 캘린더 등록 처리.
1. 화면 처리 방식 결정
	1) 등록할 속성값 지정
		id				[DB]
		groupId			[DB]
		title			[입력]
		writer			[입력]
		content			[입력]
		start			[full api]
		end				[full api]
		allDay			[full api]
		textColor		[입력]
		backgroundColor	[입력]
		borderColor		[입력]
	2) 등록할 화면 로딩(dialogue-jquery ui/bootstrap 으로 처리)
		위에 있는 입력값을 
		ex1) form에 넣고, jquery ui dialogue 화면처리..
		ex2) form에 넣고, bootstrap으로 dialogue 화면처리..
		1) 기본 화면 구성
				<div id="schDialog" title="일정">
					<form id="frm">
						<input name="id" type="hidden" value="0"/>
						<div class="input-group mb-3">
							<div class="input-group-prepend">
								<span class="input-group-text">제목</span>
							</div>
							<input class="form-control" name="title" type="text"/>
				</div>
		2) css 설정
			주의 다른 css 호출의 마지막 부분에 설정.
		<style type="text/css">
			input[type=text], select, label, textarea{
				margin-bottom:12px;padding: .4em;width:95%;
			}
			.input-group-text{
				width:100%;text-align:center;background-color:linen;color:black;font-weight:bolder;}
			.input-group-prepend{width:35%;}
		</style>
		3) jquery 설정.. : button의 기능에 따른 동적 처리..
			- 기본 옵션으로 dialogue 설정.
			document.addEventListener('DOMContentLoaded', function() {
			var opts={
				autoOpen:false,	// 초기에 로딩하지 않게 처리
				width:"350px",
				modal:true	// popup창시, 다른 요소객체 비활성화 처리.		// 입력시 그 외 화면처리는 비활성화 처리.
				buttons:{
					"버튼명":function(){},
					"버튼명2":function(){}					
				}
			}
			$("#schDialog").dialog(opts);
			// 다이얼로그를 사용할 준비..
			// $("#schDialog").dialog("open"); 다이얼로그 로딩
			// $("#schDialog").dialog("close"); 다이얼로그 창닫기
			
			- 등록 처리할 때, 등록 버튼이 추가된 dialogue 설정 및 open
			      select: function(arg) {
		    	  opts.buttons={
						"등록":function(){
							
						}
		    	  };
		    	  // 등록 버튼을 클릭시, 옵션을 다시 처리.
		    	  $("#schDialog").dialog(opts);
		    	  $("#schDialog").dialog("open");
		    	  // $("#btn01").click();
		    	  // arg를 받은 기본 속성값으로 특정한 form요소객체의 값을 
		    	  // 설정 해준다.
		    	  // 날짜/시간을 클릭하거나 드래그한 날짜 시간으로,
		    	  //		Date()객체.toLocaleString() : 서울 기준으로
		    	  //		날짜 출력 형식 처리..(GMT)
		    	  $("[name=start]").val(arg.start.toLocaleString());
		    	  $("[name=end]").val(arg.end.toLocaleString());
		    	  // 
		    	  $("[name=allDay]").val(""+arg.allDay);
	
	
	3) 등록 버튼 클릭시,  ajax 처리..
		"등록":function(){}
		부분에 등록 버튼 클릭시, 처리할 ajax를 선언합니다.
		- 우선, 전달할 데이터를 json형식으로 정리
		- calendar.addEvent(추가할 json 데이터) : 화면 반영
		- $.ajax();를 통해서 서버에 요청값으로 전달.
	
	
	
	4) controller단 호출 및 작성.
2. SQL 작성
	1) 등록
		INSERT INTO calendar values(cal_seq.nextval, '',
		#{title},#{writer},#{content},
		#{start},
		#{end}, #{allDay}, #{textColor},#{backgroundColor},
		#{borderColor})
		
	
	
3. sql에 맞는 vo 확인
4. dao 작성
	public void insertCalendar(Calendar ins);
5. mapper.xml 작성
6. service 작성
7. controller 호출 service 처리..
	/calendar.do?method=insert
8. 화면단 ajax처리
	1) 날짜에 대한 부분을 입력 클릭시, 가져온다.
		클릭시, 시작날짜와 종료날짜 객체를 전역변수에 할당.
	2) 입력버튼 클릭시,
		날짜 ==> ISOString형식으로 변환하여 화면과 DB에 전송
	3) ajax처리
	
	
		$.ajax({
			data:sch,
			success:function(data){
				if(data.success=="Y"){
					alert("등록 성공");
				}
			});
			
# 캘린더 상세화면 처리.
1. 캘린더는 초기에 list할 때, 캘린더의 각 상세정보 데이터까지, 각 일정마다
가지고 있다. 해당 내용 클릭시, 내부적으로 속성값을 호출해서, 원하는 화면 UI를
통해서 출력하면 된다.
2. 프로그래밍
	1) 클릭시, 처리되는 매개변수를 통해서 일정을 가져와서
	2) dialogue로 처리되는 div의 form하위 요소의 값에 할당 처리
	3) 상세이기 때문에 dialogue 버튼 옵션을 수정/삭제 버튼으로 처리한다.
	
# 캘린더 수정/삭제 처리.
1. 수정 삭제 sql 작성.
	update calendar
		set title ='',
			start1 = '',
			end1 = '',
			content='',
			backgroundcolor='',
			bordercolor='',
			textcolor='',
			allday=''
		where id='';
	delete
	from calendar
	where id='';
	
2. dao/mapper작성
	public void updateCalen(Calendar upt);
	public void deleteCalen(int id);
	
3. service/controller 호출.
4. controller 기능 메서드 선언
	method=update
	method=delete
	--------------------------------
5. 화면단 (event시 처리)
	# 화면처리(캘린더 내부 api 처리)
	# ajax 처리(DB처리) - 
	0) 수정 이벤트 확인
		상세 화면 수정
		drag and drop 수정(날짜와 시간 변경)
		resize 수정(시간 변경)
		
	1) 수정 클릭시..
		입력 내용 변경된 부분을 json데이터로 가져오기.
		# 화면 변경
		현재 이벤트를 데이터를 id값으로 가져와서
		setPop를 통해 변경
		# ajax 처리
		
	2) 삭제 클릭시..

# drag and drop 수정 (날짜와 시간 변경)
	resize 수정 (시간 변경)
1. arg값을 가져와서 변경값을
	0) 기존 수정 ajax처리와 모듈을 활용하기 위하여 parameter 처리로
		ajax 요청값을 변경한다.
	1) arg.event로 변경 속성을 가져온다.
	2) 날짜관련 내용은 ISO형식으로 변경시킨다.
	3) ajax로 수정 처리한다.
	
2. 수정 데이터 변경 처리
	1) 기존 데이터에서 sch객체 해당 요청값으로 변경 데이터를 처리한다..
		var sc={};
		sch.title=arg.event.title;
		sch.start=arg.event.start.toISOString();
		sch.end=arg.event.end.toISOString();
		sch.content=arg.event.content;
		sch.backgroundColor=arg.event.backgroundColor;
		sch.borderColor=arg.event.borderColor;
		sch.allDay=arg.event.allDay;
